{"version":3,"sources":["components/App.js","serviceWorker.js","redux/store.js","index.js","redux/ducks/main/index.js","redux/ducks/aside/index.js","redux/ducks/phase2/index.js","redux/ducks/phase1/index.js","redux/ducks/reminders/index.js","redux/ducks/activities/index.js","redux/ducks/inviteUsers/index.js","redux/ducks/message/index.js"],"names":["FrontPage","React","lazy","Login","Register","Dashboard","props","redirectUrl","className","fallback","exact","path","component","render","to","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","reducers","enhancer","applyMiddleware","thunk","store","createStore","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","initialState","jurns","useMain","dispatch","useDispatch","useSelector","appState","MainState","get","api","resp","type","payload","main","sendJurn","user_id","jname","Promise","resolve","reject","post","id","e","createJurn","state","action","user","pendJurns","getAside","aside","useAside","aJurns","AsideState","aUser","pendingJurns","delJurn","jurn_id","patch","removeJurn","fetchAside","sendProfile","fname","lname","cellphone","avatar","err","updateProfile","sendDecline","updateDecline","sendAccept","updateAccept","jurnInfo","activities","usePhase2","Phase2State","updatePhase2","phase2","getPhase2","locations","hotels","dateRanges","usePhase1","Phase1State","updatePhase1","phase1","dateRange","getPhase1","sendLocation","createLocation","sendHotel","hotel","createHotel","sendDates","date","createDateRange","updateFinalDates","finalDates","updateFinalLocation","finalLocation","updateFinalHotel","finalHotel","updatePhoto","photo","finalPhoto","GET_REMS","rems","remsCount","getRems","getRemsCount","length","useRems","RemindersState","addRem","reminder","addReminder","toggleRem","rem_id","status","toggleReminder","filterRems","query","filterReminders","clearRems","all","map","rem","delete","values","clearReminders","updateRems","GET_ACTS","acts","actsCount","getActs","getActsCount","useActs","ActivitiesState","addAct","activity","addActivity","toggleAct","act_id","log","toggleActivity","filterActs","filterActivities","clearActs","act","clearActivities","updateActs","GET_INVITED","pending","accepted","declined","useInvited","InviteState","updateInvited","invited","getInvited","sendInvite","firstName","lastName","createInvite","msgs","useMessages","messages","MessageState","getMessages","sendMessage","jurnId","createMessage"],"mappings":"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","file":"static/js/main.f8647650.chunk.js","sourcesContent":["import React, { Suspense } from \"react\"\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\"\nimport { AuthProvider, AuthRoute } from \"react-auth\"\nimport \"semantic-ui-css/semantic.min.css\"\nimport \"../styles/base.scss\"\n\nconst FrontPage = React.lazy(() => import(\"./FrontPage\"))\nconst Login = React.lazy(() => import(\"./auth/Login\"))\nconst Register = React.lazy(() => import(\"./auth/Register\"))\nconst Dashboard = React.lazy(() => import(\"./dashboard/Dashboard\"))\n\nexport default (props) => {\n\treturn (\n\t\t<AuthProvider redirectUrl=\"/Jurne\">\n\t\t\t<Router>\n\t\t\t\t<div className=\"app\">\n\t\t\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t\t\t<Route exact path=\"/Jurne\" component={FrontPage} />\n\t\t\t\t\t\t<Route path=\"/login\" component={Login} />\n\t\t\t\t\t\t<Route path=\"/register\" component={Register} />\n\t\t\t\t\t\t<Route exact path=\"/\" render={() => <Redirect to=\"/Jurne\" />} />\n\t\t\t\t\t\t<AuthRoute path=\"/Jurne/:page\" component={Dashboard} />\n\t\t\t\t\t</Suspense>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</AuthProvider>\n\t)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport * as reducers from \"./ducks\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst rootReducer = combineReducers(reducers)\nconst enhancer = composeEnhancers(applyMiddleware(thunk))\n\nconst store = createStore(rootReducer, enhancer)\n\nexport default store\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./styles/base.scss\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Provider } from \"react-redux\"\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_MAIN = \"MAIN/GET_Main\"\n\nconst initialState = {\n  jurns: [],\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MAIN:\n      return { ...state, ...action.payload }\n\n    default:\n      return state\n  }\n}\n\nfunction getMain() {\n  return (dispatch) => {\n    api\n      .get(\"/main\")\n      .then((resp) => {\n        dispatch({\n          type: GET_MAIN,\n          payload: {\n            jurns: resp.main,\n          },\n        })\n      })\n      .catch()\n  }\n}\n\nfunction createJurn(user_id, jname) {\n  return new Promise((resolve, reject) => {\n    api\n      .post(\"/jurn\", { user_id, jname })\n      .then((resp) => {\n        resolve(resp.id)\n      })\n      .catch((e) => {\n        reject()\n      })\n  })\n}\n\nexport function useMain() {\n  const dispatch = useDispatch()\n  const jurns = useSelector((appState) => appState.MainState.jurns)\n\n  const get = () => dispatch(getMain())\n  const sendJurn = (user_id, jname) => createJurn(user_id, jname)\n\n  return { jurns, get, sendJurn }\n}\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_ASIDE = \"aside/GET_ASIDE\"\n\nconst initialState = {\n  jurns: [],\n  user: {},\n  pendJurns: [],\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ASIDE:\n      return { ...state, ...action.payload }\n\n    default:\n      return state\n  }\n}\n\nfunction getAside() {\n  return (dispatch) => {\n    api\n      .get(\"/aside\")\n      .then((resp) => {\n        dispatch({\n          type: GET_ASIDE,\n          payload: {\n            jurns: resp.aside.jurns,\n            user: resp.aside.user,\n            pendJurns: resp.aside.pendJurns,\n          },\n        })\n      })\n      .catch()\n  }\n}\n\nfunction updateProfile(fname, lname, cellphone, avatar, user_id) {\n  return (dispatch) => {\n    api\n      .patch(\"/updateprofile\", { fname, lname, cellphone, avatar, user_id })\n      .then((resp) => {\n        dispatch(getAside())\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }\n}\n\nfunction updateAccept(user_id, jurn_id) {\n  return (dispatch) => {\n    api\n      .patch(\"/updateaccept\", { user_id, jurn_id })\n      .then((resp) => {\n        dispatch(getAside())\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }\n}\n\nfunction updateDecline(user_id, jurn_id) {\n  return (dispatch) => {\n    api\n      .patch(\"/updateDecline\", { user_id, jurn_id })\n      .then((resp) => {\n        dispatch(getAside())\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }\n}\n\nfunction removeJurn(user_id, jurn_id) {\n  return new Promise((resolve, reject) => {\n    api\n      .patch(\"/removejurne\", { user_id, jurn_id })\n      .then((resp) => {\n        resolve(resp)\n      })\n      .catch((e) => {\n        reject()\n      })\n  })\n}\n\nexport function useAside() {\n  const dispatch = useDispatch()\n  const aJurns = useSelector((appState) => appState.AsideState.jurns)\n  const aUser = useSelector((appState) => appState.AsideState.user)\n  const pendingJurns = useSelector((appState) => appState.AsideState.pendJurns)\n  const sendProfile = (fname, lname, cellphone, avatar, user_id) =>\n    dispatch(updateProfile(fname, lname, cellphone, avatar, user_id))\n  const fetchAside = () => dispatch(getAside())\n  const sendAccept = (user_id, jurn_id) =>\n    dispatch(updateAccept(user_id, jurn_id))\n  const sendDecline = (user_id, jurn_id) =>\n    dispatch(updateDecline(user_id, jurn_id))\n  const delJurn = (user_id, jurn_id) => removeJurn(user_id, jurn_id)\n\n  return {\n    aJurns,\n    aUser,\n    pendingJurns,\n    delJurn,\n    fetchAside,\n    sendProfile,\n    sendDecline,\n    sendAccept,\n  }\n}\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_PHASE2 = \"phase2/GET_PHASE2\"\n\nconst initialState = {\n  jurnInfo: {},\n  activities: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PHASE2:\n      return {\n        ...state,\n        jurnInfo: action.payload.jname,\n        activities: action.payload.activities\n      }\n\n    default:\n      return state\n  }\n}\n\nfunction getPhase2(jurn_id) {\n  return dispatch => {\n    api\n      .get(\"/phase2/\" + jurn_id)\n      .then(resp => {\n        dispatch({\n          type: GET_PHASE2,\n          payload: resp.phase2\n        })\n      })\n      .catch()\n  }\n}\n\nexport function usePhase2() {\n  const dispatch = useDispatch()\n  const jurnInfo = useSelector(appState => appState.Phase2State.jurnInfo)\n  const activities = useSelector(appState => appState.Phase2State.activities)\n  const updatePhase2 = jurn_id => dispatch(getPhase2(jurn_id))\n\n  return { jurnInfo, activities, updatePhase2 }\n}\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_PHASE1 = \"phase1/GET_PHASE1\"\n\nconst initialState = {\n  locations: [],\n  hotels: [],\n  dateRanges: [],\n  jname: {},\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PHASE1:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nfunction getPhase1(jurn_id) {\n  return (dispatch) => {\n    api\n      .get(\"/phase1/\" + jurn_id)\n      .then((resp) => {\n        dispatch({\n          type: GET_PHASE1,\n          payload: {\n            locations: resp.phase1.locations,\n            jname: resp.phase1.jname,\n            hotels: resp.phase1.hotels,\n            dateRanges: resp.phase1.dateRange,\n          },\n        })\n      })\n      .catch()\n  }\n}\n\nfunction createLocation(location, jurn_id) {\n  return (dispatch) => {\n    api.post(\"/location\", { location, jurn_id }).catch()\n  }\n}\n\nfunction createHotel(hotel, jurn_id) {\n  return (dispatch) => {\n    api.post(\"/hotel\", { hotel, jurn_id }).catch()\n  }\n}\n\nfunction createDateRange(date, jurn_id) {\n  return (dispatch) => {\n    api.post(\"/dates\", { date, jurn_id }).catch()\n  }\n}\n\nfunction finalDates(date, jurn_id) {\n  return new Promise((resolve, reject) => {\n    api\n      .patch(\"/finaldates\", { date, jurn_id })\n      .then(() => {\n        resolve(jurn_id)\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nfunction finalLocation(location, jurn_id) {\n  return new Promise((resolve, reject) => {\n    api\n      .patch(\"/finallocation\", { location, jurn_id })\n      .then(() => {\n        resolve(jurn_id)\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nfunction finalHotel(hotel, jurn_id) {\n  return new Promise((resolve, reject) => {\n    api\n      .patch(\"/finalhotel\", { hotel, jurn_id })\n      .then(() => {\n        resolve(jurn_id)\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nfunction finalPhoto(jurn_id, photo) {\n  return new Promise((resolve, reject) => {\n    api\n      .patch(\"/finalphoto\", { jurn_id, photo })\n      .then(() => {\n        resolve(jurn_id)\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nexport function usePhase1() {\n  const dispatch = useDispatch()\n  const jname = useSelector((appState) => appState.Phase1State.jname)\n  const locations = useSelector((appState) => appState.Phase1State.locations)\n  const hotels = useSelector((appState) => appState.Phase1State.hotels)\n  const dateRanges = useSelector((appState) => appState.Phase1State.dateRanges)\n  const updatePhase1 = (jurn_id) => dispatch(getPhase1(jurn_id))\n  const sendLocation = (location, jname) => {\n    dispatch(createLocation(location, jname))\n  }\n  const sendHotel = (hotel, jname) => {\n    dispatch(createHotel(hotel, jname))\n  }\n  const sendDates = (date, jname) => {\n    dispatch(createDateRange(date, jname))\n  }\n  const updateFinalDates = (date, jurn_id) => finalDates(date, jurn_id)\n  const updateFinalLocation = (location, jurn_id) =>\n    finalLocation(location, jurn_id)\n  const updateFinalHotel = (hotel, jurn_id) => finalHotel(hotel, jurn_id)\n  const updatePhoto = (jurn_id, photo) => finalPhoto(jurn_id, photo)\n\n  return {\n    jname,\n    locations,\n    hotels,\n    dateRanges,\n    updatePhase1,\n    sendLocation,\n    sendHotel,\n    sendDates,\n    updateFinalDates,\n    updateFinalLocation,\n    updateFinalHotel,\n    updatePhoto,\n  }\n}\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_REMS = \"reminders/GET_REMS\"\nconst SET_REMSCOUNT = \"reminders/SET_REMSCOUNT\"\n\nconst initialState = {\n  rems: [],\n  remsCount: 0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_REMS:\n      return { ...state, rems: action.payload }\n    case SET_REMSCOUNT:\n      return { ...state, remsCount: action.payload }\n\n    default:\n      return state\n  }\n}\n\nfunction getRems(jurn_id, user_id) {\n  return dispatch => {\n    api.get(`/reminders/${jurn_id}/${user_id}`).then(resp => {\n      dispatch(getRemsCount(jurn_id, user_id))\n      dispatch({\n        type: GET_REMS,\n        payload: resp\n      })\n    })\n  }\n}\n\nfunction addReminder(reminder, jurn_id, user_id) {\n  return dispatch => {\n    api.post(\"/addrem\", { reminder, jurn_id, user_id }).then(resp => {\n      dispatch(getRems(jurn_id, user_id))\n    })\n  }\n}\n\nfunction toggleReminder(rem_id, jurn_id, user_id) {\n  return dispatch => {\n    api.get(\"/togglerem/\" + rem_id).then(resp => {\n      const status = resp.status\n      const rem_id = resp.rem_id\n      if (status === \"completed\") {\n        api.patch(\"/reminder\", { rem_id, status: \"active\" }).then(resp => {\n          dispatch(getRems(jurn_id, user_id))\n        })\n      } else {\n        api.patch(\"/reminder\", { rem_id, status: \"completed\" }).then(resp => {\n          dispatch(getRems(jurn_id, user_id))\n        })\n      }\n    })\n  }\n}\n\nfunction filterReminders(status, jurn_id, user_id) {\n  return dispatch => {\n    let query = \"\"\n    if (status === \"all\") {\n      query = \"\"\n    } else if (status === \"completed\") {\n      query = \"?status=completed\"\n    } else if (status === \"active\") {\n      query = \"?status=active\"\n    }\n    api.get(`/reminders/${jurn_id}/${user_id}${query}`).then(resp => {\n      dispatch({\n        type: GET_REMS,\n        payload: resp\n      })\n      dispatch(getRemsCount(jurn_id, user_id))\n    })\n  }\n}\n\nfunction getRemsCount(jurn_id, user_id) {\n  return dispatch => {\n    api.get(`/reminders/${jurn_id}/${user_id}?status=active`).then(resp => {\n      dispatch({\n        type: SET_REMSCOUNT,\n        payload: resp.length\n      })\n    })\n  }\n}\n\nfunction clearReminders(jurn_id, user_id) {\n  return dispatch => {\n    api.get(`/reminders/${jurn_id}/${user_id}?status=completed`).then(resp => {\n      //Broken down here, getting [] as resp\n      Promise.all(\n        resp.map(\n          rem =>\n            new Promise((resolve, reject) => {\n              api.delete(\"/reminder/\" + rem.rem_id).then(resp => {\n                resolve()\n              })\n            })\n        )\n      ).then(values => {\n        dispatch(getRems(jurn_id, user_id))\n      })\n    })\n  }\n}\n\nexport function useRems() {\n  const dispatch = useDispatch()\n  const rems = useSelector(appState => appState.RemindersState.rems)\n  const remsCount = useSelector(appState => appState.RemindersState.remsCount)\n  const addRem = (reminder, jurn_id, user_id) =>\n    dispatch(addReminder(reminder, jurn_id, user_id))\n  const toggleRem = (rem_id, jurn_id, user_id) =>\n    dispatch(toggleReminder(rem_id, jurn_id, user_id))\n  const filterRems = (status, jurn_id, user_id) =>\n    dispatch(filterReminders(status, jurn_id, user_id))\n  const clearRems = (jurn_id, user_id) =>\n    dispatch(clearReminders(jurn_id, user_id))\n  const updateRems = (jurn_id, user_id) => dispatch(getRems(jurn_id, user_id))\n\n  return {\n    rems,\n    remsCount,\n    addRem,\n    toggleRem,\n    filterRems,\n    clearRems,\n    updateRems\n  }\n}\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_ACTS = \"activities/GET_ACTS\"\nconst SET_ACTSCOUNT = \"activities/SET_ACTSCOUNT\"\n\nconst initialState = {\n  acts: [],\n  actsCount: 0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ACTS:\n      return { ...state, acts: action.payload }\n    case SET_ACTSCOUNT:\n      return { ...state, actsCount: action.payload }\n\n    default:\n      return state\n  }\n}\n\nfunction getActs(jurn_id) {\n  return dispatch => {\n    api.get(\"/activities/\" + jurn_id).then(resp => {\n      dispatch(getActsCount(jurn_id))\n      dispatch({\n        type: GET_ACTS,\n        payload: resp\n      })\n    })\n  }\n}\n\nfunction addActivity(activity, jurn_id) {\n  return dispatch => {\n    api.post(\"/addact\", { activity, jurn_id }).then(resp => {\n      dispatch(getActs(jurn_id))\n    })\n  }\n}\n\nfunction toggleActivity(act_id, jurn_id) {\n  return dispatch => {\n    api.get(\"/toggleact/\" + act_id).then(resp => {\n      console.log(resp)\n      const status = resp.status\n      const act_id = resp.act_id\n      if (status === \"completed\") {\n        api.patch(\"/activity\", { act_id, status: \"active\" }).then(resp => {\n          dispatch(getActs(jurn_id))\n        })\n      } else {\n        api.patch(\"/activity\", { act_id, status: \"completed\" }).then(resp => {\n          dispatch(getActs(jurn_id))\n        })\n      }\n    })\n  }\n}\n\nfunction filterActivities(status, jurn_id) {\n  return dispatch => {\n    let query = \"\"\n    if (status === \"all\") {\n      query = \"\"\n    } else if (status === \"completed\") {\n      query = \"?status=completed\"\n    } else if (status === \"active\") {\n      query = \"?status=active\"\n    }\n    api.get(`/activities/${jurn_id}${query}`).then(resp => {\n      dispatch({\n        type: GET_ACTS,\n        payload: resp\n      })\n      dispatch(getActsCount(jurn_id))\n    })\n  }\n}\n\nfunction getActsCount(jurn_id) {\n  return dispatch => {\n    api.get(`/activities/${jurn_id}?status=active`).then(resp => {\n      dispatch({\n        type: SET_ACTSCOUNT,\n        payload: resp.length\n      })\n    })\n  }\n}\n\nfunction clearActivities(jurn_id) {\n  return dispatch => {\n    api.get(`/activities/${jurn_id}?status=completed`).then(resp => {\n      Promise.all(\n        resp.map(\n          act =>\n            new Promise((resolve, reject) => {\n              api.delete(\"/activity/\" + act.act_id).then(resp => {\n                resolve()\n              })\n            })\n        )\n      ).then(values => {\n        dispatch(getActs(jurn_id))\n      })\n    })\n  }\n}\n\nexport function useActs() {\n  const dispatch = useDispatch()\n  const acts = useSelector(appState => appState.ActivitiesState.acts)\n  const actsCount = useSelector(appState => appState.ActivitiesState.actsCount)\n  const addAct = (activity, jurn_id) => dispatch(addActivity(activity, jurn_id))\n  const toggleAct = (act_id, jurn_id) =>\n    dispatch(toggleActivity(act_id, jurn_id))\n  const filterActs = (status, jurn_id) =>\n    dispatch(filterActivities(status, jurn_id))\n  const clearActs = jurn_id => dispatch(clearActivities(jurn_id))\n  const updateActs = jurn_id => dispatch(getActs(jurn_id))\n  return {\n    acts,\n    actsCount,\n    addAct,\n    toggleAct,\n    filterActs,\n    clearActs,\n    updateActs\n  }\n}\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_INVITED = \"inviteUsers/GET_INVITED\"\n\nconst initialState = {\n  pending: [],\n  accepted: [],\n  declined: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INVITED:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nfunction getInvited(jurn_id) {\n  return dispatch => {\n    api\n      .get(\"/invited/\" + jurn_id)\n      .then(resp => {\n        dispatch({\n          type: GET_INVITED,\n          payload: {\n            pending: resp.invited.pending,\n            accepted: resp.invited.accepted,\n            declined: resp.invited.declined\n          }\n        })\n      })\n      .catch()\n  }\n}\n\nfunction createInvite(firstName, lastName, jurn_id) {\n  return new Promise((resolve, reject) => {\n    api\n      .post(\"/invite\", { firstName, lastName, jurn_id })\n      .then(resp => {\n        resolve(resp)\n      })\n      .catch(e => {\n        reject()\n      })\n  })\n}\n\nexport function useInvited() {\n  const dispatch = useDispatch()\n  const updateInvited = jurn_id => dispatch(getInvited(jurn_id))\n  const pending = useSelector(appState => appState.InviteState.pending)\n  const accepted = useSelector(appState => appState.InviteState.accepted)\n  const declined = useSelector(appState => appState.InviteState.declined)\n  const sendInvite = (firstName, lastName, jurn_id) =>\n    createInvite(firstName, lastName, jurn_id)\n\n  return {\n    pending,\n    accepted,\n    declined,\n    updateInvited,\n    sendInvite\n  }\n}\n","import { useSelector, useDispatch } from \"react-redux\"\nimport { api } from \"react-auth\"\n\nconst GET_MESSAGES = \"chatroom/GET_MESSAGES\"\n\nconst initialState = {\n  msgs: [],\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MESSAGES:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nfunction fetchMessages() {\n  return (dispatch) => {\n    api\n      .get(`/messages`)\n      .then((resp) => {\n        dispatch({\n          type: GET_MESSAGES,\n          payload: {\n            msgs: resp.messages,\n          },\n        })\n      })\n      .catch()\n  }\n}\n\nfunction createMessage(user_id, jurnId, message) {\n  return new Promise((resolve, reject) => {\n    api\n      .post(\"/message\", { user_id, jurnId, message })\n      .then((resp) => {\n        resolve(resp)\n      })\n      .catch((e) => {\n        reject()\n      })\n  })\n}\n\nexport function useMessages() {\n  const dispatch = useDispatch()\n  const messages = useSelector((appState) => appState.MessageState.msgs)\n  const getMessages = () => dispatch(fetchMessages())\n  const sendMessage = (user_id, jurnId, message) =>\n    createMessage(user_id, jurnId, message)\n\n  return { messages, getMessages, sendMessage }\n}\n"],"sourceRoot":""}