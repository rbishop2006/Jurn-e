{"version":3,"sources":["components/auth/Register.js"],"names":["props","signin","useAuth","useState","username","setUsername","usernameError","setUsernameError","fname","setFname","fnameError","setFnameError","lname","setLname","lnameError","setLnameError","password","setPassword","passwordError","setPasswordError","confirm","setConfirm","confirmError","setConfirmError","to","className","src","alt","onSubmit","e","preventDefault","valid","validator","isEmail","isAlpha","isAlphanumeric","equals","api","post","then","data","history","push","Field","htmlFor","id","type","value","onChange","target","placeholder"],"mappings":"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","file":"static/js/10.f55836a1.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport { api, useAuth } from \"react-auth\"\nimport { Link } from \"react-router-dom\"\nimport validator from \"validator\"\nimport { Button, Form } from \"semantic-ui-react\"\nimport \"../../styles/Login.scss\"\n\nexport default (props) => {\n  const { signin } = useAuth()\n  const [username, setUsername] = useState(\"\")\n  const [usernameError, setUsernameError] = useState(\"\")\n  const [fname, setFname] = useState(\"\")\n  const [fnameError, setFnameError] = useState(\"\")\n  const [lname, setLname] = useState(\"\")\n  const [lnameError, setLnameError] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [passwordError, setPasswordError] = useState(\"\")\n  const [confirm, setConfirm] = useState(\"\")\n  const [confirmError, setConfirmError] = useState(\"\")\n\n  function handleRegister(e) {\n    e.preventDefault()\n    let valid = true\n\n    if (!validator.isEmail(username)) {\n      valid = false\n      setUsernameError(` - Please enter valid email address`)\n    } else {\n      setUsernameError(\"\")\n    }\n\n    if (!validator.isAlpha(fname, \"en-US\")) {\n      valid = false\n      setFnameError(` - Can't be blank & can only contain letters`)\n    } else {\n      setFnameError(\"\")\n    }\n\n    if (!validator.isAlpha(lname, \"en-US\")) {\n      valid = false\n      setLnameError(` - Can't be blank & can only contain letters`)\n    } else {\n      setLnameError(\"\")\n    }\n\n    if (!validator.isAlphanumeric(password, \"en-US\")) {\n      valid = false\n      setPasswordError(` - Can't be blank`)\n    } else {\n      setPasswordError(\"\")\n    }\n\n    if (!validator.equals(confirm, password)) {\n      valid = false\n      setConfirmError(` - Must match password`)\n    } else {\n      setConfirmError(\"\")\n    }\n\n    if (valid) {\n      api\n        .post(\"/register\", { username, fname, lname, password })\n        .then((data) => {\n          signin(username, password).then(() => {\n            props.history.push(\"/Jurne/dashboard\")\n          })\n        })\n    }\n  }\n\n  return (\n    <div>\n      <Link to={\"/Jurne\"} className=\"logo\">\n        <img src=\"/JurnEase-logo.png\" alt=\"Jurn(ease) logo\"></img>\n      </Link>\n      <Form onSubmit={handleRegister} className=\"registerDiv\">\n        <Form.Field>\n          <label className={usernameError ? \"error\" : \"\"} htmlFor=\"email\">\n            Email {usernameError && usernameError}\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={username}\n            className={usernameError ? \"errorBox\" : \"\"}\n            onChange={(e) => setUsername(e.target.value)}\n            placeholder=\"johnsmith@email.com\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label className={fnameError ? \"error\" : \"\"} htmlFor=\"fname\">\n            First Name {fnameError && fnameError}\n          </label>\n          <input\n            id=\"fname\"\n            type=\"text\"\n            value={fname}\n            className={fnameError ? \"errorBox\" : \"\"}\n            onChange={(e) => setFname(e.target.value)}\n            placeholder=\"ex. John\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label className={lnameError ? \"error\" : \"\"} htmlFor=\"lname\">\n            Last Name {lnameError && lnameError}\n          </label>\n          <input\n            id=\"lname\"\n            type=\"text\"\n            value={lname}\n            className={lnameError ? \"errorBox\" : \"\"}\n            onChange={(e) => setLname(e.target.value)}\n            placeholder=\"ex. Smith\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label className={passwordError ? \"error\" : \"\"} htmlFor=\"password\">\n            Password {passwordError && passwordError}\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            className={passwordError ? \"errorBox\" : \"\"}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Create a password\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label className={confirmError ? \"error\" : \"\"} htmlFor=\"confirm\">\n            Confirm Password {confirmError && confirmError}\n          </label>\n          <input\n            id=\"confirm\"\n            type=\"password\"\n            value={confirm}\n            className={confirmError ? \"errorBox\" : \"\"}\n            onChange={(e) => setConfirm(e.target.value)}\n            placeholder=\"Re-enter password\"\n          />\n        </Form.Field>\n        <Button type=\"submit\">Register</Button>\n        <div className=\"linkDiv\">\n          <p>\n            Already a Jurn(<em>ease</em>) member?\n          </p>\n          <Link to=\"/login\">Click Here</Link>\n        </div>\n      </Form>\n    </div>\n  )\n}\n"],"sourceRoot":""}